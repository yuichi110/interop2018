from graphviz import Digraph
import netmiko
import re
import threading
import traceback
from fpdf import FPDF

PATTERN = re.compile(r'^\d')

device_list = [
# ('45.0.0.1', '', 'cisco_xr'),
('45.0.0.2', '172.16.0.2', 'juniper_junos'),
('45.0.0.3', '172.16.0.3', 'cisco_xr'),
('45.0.0.4', '172.16.0.4', 'huawei'),
('45.0.0.5', '172.16.0.5', 'juniper_junos'),
# ('45.0.0.6', '172.16.0.6', 'linux'),
('45.0.0.7', '172.16.0.7', 'huawei'),
('45.0.0.8', '172.16.0.8', 'cisco_xr'),
('45.0.0.9', '172.16.0.9', 'cisco_xr'),
('45.0.0.10', '172.16.0.10', 'huawei'),
('45.0.0.11', '172.16.0.11', 'huawei'),
# ('45.0.0.12', '172.16.0.12', 'dell'),
('45.0.0.13', '172.16.0.13', 'huawei'),
('45.0.0.14', '172.16.0.14', 'cisco_xr'),
('45.0.0.15', '172.16.0.15', 'cisco_xr'),
('45.0.0.16', '172.16.0.16', 'juniper_junos'),
]

def testg():
    G = Digraph(format='png')
    G.attr('node', shape='circle')
    N = 15
    for i in range(N):
        G.node(str(i), str(i))

    for i in range(N):
        if (i - 1) // 2 >= 0:
            G.edge(str((i - 1) // 2), str(i))
    print(G)
    G.render('binary_tree')


lock = threading.Lock()
sdict = {}
def sync_push(source, dest, hops):
    lock.acquire()
    print('source:{}, dest:{}, hops:{}'.format(source, dest, hops))
    ddict = sdict.setdefault(source, {})
    ddict[dest] = hops
    lock.release()

def sync_get(source, dest):
    lock.acquire()
    if source not in sdict:
        return []
    ddict = sdict[source]
    hops = ddict.get(dest, [])
    lock.release()
    return hops



class AsyncTraceroute(threading.Thread):
    def __init__(self, host, mgmt, dstlist, device_type):
        super(AsyncTraceroute, self).__init__()
        self.host = host
        self.mgmt = mgmt
        self.dstlist = dstlist
        self.device_type = device_type
        self.thread = threading.Thread(target=self.run)

    def run(self):
        try:
            session = netmiko.ConnectHandler(
              device_type=self.device_type,
              host=self.mgmt,
              username='major',
              password='n3zu0tani',
            )
            session.enable()

            for dst in self.dstlist:
                if self.device_type == 'huawei':
                    command = 'tracert {}'.format(dst)
                else:
                    command = 'traceroute {}'.format(dst)

                counter = 3
                while counter >= 0:
                    output = session.send_command(command)
                    hops = self.parse(output)
                    if '*' not in hops:
                        sync_push(self.host, dst, hops)
                        break
                    else:
                        # has "*". Retry again. Max 3 times
                        print('has *, retry')
                        counter -= 1

            session.disconnect()

        except:
            text = '\nError. Having trouble for accessing host "{}". '.format(self.mgmt)
            text += 'Please check IP reachability and SSH setting.\n\n'
            text += traceback.format_exc()
            print(text)

    def parse(self, text):
        hops = []
        for line in text.splitlines():
            line = line.lstrip()
            match = PATTERN.search(line)
            if match is not None:
                words = line.split()
                if len(words) >= 1:
                    hops.append(words[1])
        return hops

def gather():
    dst_list = []
    for (dst, _, _,) in device_list:
        dst_list.append(dst)

    thread_list = []
    for (host, mgmt, device_type) in device_list:
        dst_list2 = dst_list[:]
        if host in dst_list2:
            dst_list2.remove(host)

        #print(host, mgmt, dst_list2, device_type)
        thread = AsyncTraceroute(host, mgmt, dst_list2, device_type)
        thread.start()
        thread_list.append(thread)

    for thread in thread_list:
        print('waiting response from host "{}"'.format(thread.host))
        thread.join()

    print(sdict)




def test_cisco():
    session = netmiko.ConnectHandler(
      device_type='cisco_xr',
      host='172.16.0.8',
      username='major',
      password='n3zu0tani',
    )
    session.enable()
    text = session.send_command('traceroute 45.0.0.1')
    print(text)
    session.disconnect()

def test_juniper():
    session = netmiko.ConnectHandler(
      device_type='juniper_junos',
      host='172.16.0.2',
      username='major',
      password='n3zu0tani',
    )
    session.enable()
    text = session.send_command('traceroute 45.0.0.1')
    print(text)
    session.disconnect()

def test_huawei():
    session = netmiko.ConnectHandler(
      device_type='huawei',
      host='172.16.0.4',
      username='major',
      password='n3zu0tani',
    )
    session.enable()
    text = session.send_command('tracert 45.0.0.1')
    print(text)
    session.disconnect()

def analyze(ip):
    sdict = {'45.0.0.5': {'45.0.0.2': ['45.0.0.2'], '45.0.0.3': ['45.0.1.13'], '45.0.0.4': ['45.0.0.4'], '45.0.0.7': ['45.0.0.7'], '45.0.0.8': ['45.0.1.34', '45.0.1.42'], '45.0.0.9': ['45.0.1.34', '45.0.1.46'], '45.0.0.10': ['45.0.1.34', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.34', '45.0.0.11'], '45.0.0.13': ['45.0.1.34', '45.0.0.13'], '45.0.0.14': ['45.0.1.34', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.34', '45.0.1.82'], '45.0.0.16': ['45.0.1.34', '45.0.0.16']}, '45.0.0.16': {'45.0.0.2': ['45.0.1.89', '45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.89', '45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.89', '45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.1.89', '45.0.0.5'], '45.0.0.7': ['45.0.0.7'], '45.0.0.8': ['45.0.1.89', '45.0.1.42'], '45.0.0.9': ['45.0.1.89', '45.0.1.46'], '45.0.0.10': ['45.0.1.89', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.89', '45.0.0.11'], '45.0.0.13': ['45.0.1.89', '45.0.0.13'], '45.0.0.14': ['45.0.1.89', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.89', '45.0.1.82']}, '45.0.0.3': {'45.0.0.2': ['45.0.1.14', '45.0.0.2'], '45.0.0.4': ['45.0.1.14', '45.0.0.4'], '45.0.0.5': ['45.0.0.5'], '45.0.0.7': ['45.0.1.14', '45.0.0.7'], '45.0.0.8': ['45.0.1.14', '45.0.1.34', '45.0.1.42'], '45.0.0.9': ['45.0.1.14', '45.0.1.34', '45.0.1.46'], '45.0.0.10': ['45.0.1.14', '45.0.1.34', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.14', '45.0.1.34', '45.0.0.11'], '45.0.0.13': ['45.0.1.14', '45.0.1.34', '45.0.0.13'], '45.0.0.14': ['45.0.1.14', '45.0.1.34', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.14', '45.0.1.34', '45.0.1.82'], '45.0.0.16': ['45.0.1.14', '45.0.1.34', '45.0.0.16']}, '45.0.0.4': {'45.0.0.2': ['45.0.1.22', '45.0.0.2'], '45.0.0.3': ['45.0.1.22', '45.0.1.13'], '45.0.0.5': ['45.0.0.5'], '45.0.0.7': ['45.0.1.22', '45.0.0.7'], '45.0.0.8': ['45.0.1.22', '45.0.1.34', '45.0.1.42'], '45.0.0.9': ['45.0.1.22', '45.0.1.34', '45.0.1.46'], '45.0.0.10': ['45.0.1.22', '45.0.1.34', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.22', '45.0.1.34', '45.0.0.11'], '45.0.0.13': ['45.0.1.22', '45.0.1.34', '45.0.0.13'], '45.0.0.14': ['45.0.1.22', '45.0.1.34', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.22', '45.0.1.34', '45.0.1.82'], '45.0.0.16': ['45.0.1.22', '45.0.1.34', '45.0.0.16']}, '45.0.0.8': {'45.0.0.2': ['45.0.1.41', '45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.41', '45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.41', '45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.1.41', '45.0.0.5'], '45.0.0.7': ['45.0.0.7'], '45.0.0.9': ['45.0.1.41', '45.0.1.46'], '45.0.0.10': ['45.0.1.41', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.41', '45.0.0.11'], '45.0.0.13': ['45.0.1.41', '45.0.0.13'], '45.0.0.14': ['45.0.1.41', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.86'], '45.0.0.16': ['45.0.0.16']}, '45.0.0.15': {'45.0.0.2': ['45.0.1.81', '45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.81', '45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.81', '45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.1.81', '45.0.0.5'], '45.0.0.7': ['45.0.0.7'], '45.0.0.8': ['45.0.1.81', '45.0.1.42'], '45.0.0.9': ['45.0.1.81', '45.0.1.46'], '45.0.0.10': ['45.0.1.81', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.81', '45.0.0.11'], '45.0.0.13': ['45.0.1.81', '45.0.0.13'], '45.0.0.14': ['45.0.1.81', '45.0.1.70', '45.0.1.78'], '45.0.0.16': ['45.0.1.81', '45.0.0.16']}, '45.0.0.14': {'45.0.0.2': ['45.0.1.77', '45.0.1.69', '45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.77', '45.0.1.69', '45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.77', '45.0.1.69', '45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.1.77', '45.0.1.69', '45.0.0.5'], '45.0.0.7': ['45.0.1.77', '45.0.0.7'], '45.0.0.8': ['45.0.1.77', '45.0.1.69', '45.0.1.42'], '45.0.0.9': ['45.0.1.77', '45.0.1.69', '45.0.1.46'], '45.0.0.10': ['45.0.1.77', '45.0.1.69', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.77', '45.0.1.69', '45.0.0.11'], '45.0.0.13': ['45.0.0.13'], '45.0.0.15': ['45.0.1.77', '45.0.1.69', '45.0.1.82'], '45.0.0.16': ['45.0.1.77', '45.0.1.69', '45.0.0.16']}, '45.0.0.7': {'45.0.0.2': ['45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.0.5'], '45.0.0.8': ['45.0.1.42'], '45.0.0.10': ['45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.0.11'], '45.0.0.13': ['45.0.0.13'], '45.0.0.14': ['45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.82'], '45.0.0.16': ['45.0.0.16']}, '45.0.0.13': {'45.0.0.2': ['45.0.1.69', '45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.69', '45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.69', '45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.1.69', '45.0.0.5'], '45.0.0.7': ['45.0.0.7'], '45.0.0.8': ['45.0.1.69', '45.0.1.42'], '45.0.0.9': ['45.0.1.69', '45.0.1.46'], '45.0.0.10': ['45.0.1.69', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.69', '45.0.0.11'], '45.0.0.14': ['45.0.1.78'], '45.0.0.15': ['45.0.1.69', '45.0.1.82'], '45.0.0.16': ['45.0.1.69', '45.0.0.16']}, '45.0.0.10': {'45.0.0.2': ['45.0.1.53', '45.0.1.45', '45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.53', '45.0.1.45', '45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.53', '45.0.1.45', '45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.1.53', '45.0.1.45', '45.0.0.5'], '45.0.0.7': ['45.0.1.53', '45.0.0.7'], '45.0.0.8': ['45.0.1.53', '45.0.1.45', '45.0.1.42'], '45.0.0.9': ['45.0.1.53'], '45.0.0.11': ['45.0.1.53', '45.0.1.45', '45.0.0.11'], '45.0.0.13': ['45.0.1.53', '45.0.1.45', '45.0.0.13'], '45.0.0.14': ['45.0.1.53', '45.0.1.45', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.53', '45.0.1.45', '45.0.1.82'], '45.0.0.16': ['45.0.1.53', '45.0.1.45', '45.0.0.16']}, '45.0.0.11': {'45.0.0.2': ['45.0.1.57', '45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.57', '45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.57', '45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.1.57', '45.0.0.5'], '45.0.0.7': ['45.0.0.7'], '45.0.0.8': ['45.0.1.57', '45.0.1.42'], '45.0.0.9': ['45.0.1.57', '45.0.1.46'], '45.0.0.10': ['45.0.1.57', '45.0.1.46', '45.0.0.10'], '45.0.0.13': ['45.0.1.57', '45.0.0.13'], '45.0.0.14': ['45.0.1.57', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.57', '45.0.1.82'], '45.0.0.16': ['45.0.1.57', '45.0.0.16']}, '45.0.0.9': {'45.0.0.2': ['45.0.1.45', '45.0.1.33', '45.0.0.2'], '45.0.0.3': ['45.0.1.45', '45.0.1.33', '45.0.1.13'], '45.0.0.4': ['45.0.1.45', '45.0.1.33', '45.0.0.4'], '45.0.0.5': ['45.0.1.45', '45.0.0.5'], '45.0.0.7': ['45.0.0.7'], '45.0.0.8': ['45.0.1.45', '45.0.1.42'], '45.0.0.10': ['45.0.0.10'], '45.0.0.11': ['45.0.1.45', '45.0.0.11'], '45.0.0.13': ['45.0.1.45', '45.0.0.13'], '45.0.0.14': ['45.0.1.45', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.45', '45.0.1.82'], '45.0.0.16': ['45.0.1.45', '45.0.0.16']}, '45.0.0.2': {'45.0.0.3': ['45.0.1.6', '45.0.1.13'], '45.0.0.4': ['45.0.1.6', '45.0.0.4'], '45.0.0.5': ['45.0.0.5'], '45.0.0.7': ['45.0.1.6', '45.0.0.7'], '45.0.0.8': ['45.0.1.6', '45.0.1.34', '45.0.1.42'], '45.0.0.9': ['45.0.1.6', '45.0.1.34', '45.0.1.46'], '45.0.0.10': ['45.0.1.6', '45.0.1.34', '45.0.1.46', '45.0.0.10'], '45.0.0.11': ['45.0.1.6', '45.0.1.34', '45.0.0.11'], '45.0.0.13': ['45.0.1.6', '45.0.1.34', '45.0.0.13'], '45.0.0.14': ['45.0.1.6', '45.0.1.34', '45.0.1.70', '45.0.1.78'], '45.0.0.15': ['45.0.1.6', '45.0.1.34', '45.0.1.82'], '45.0.0.16': ['45.0.1.6', '45.0.1.34', '45.0.0.16']}}

    ip2host = {}
    for (source, ddict) in sdict.items():
        for (dest, hops) in ddict.items():
            lasthop = hops[-1]
            ip2host[lasthop] = dest

    new_sdict = {}
    for (source, ddict) in sdict.items():
        new_ddict = {}
        for (dest, hops) in ddict.items():
            new_hops = [source]
            for hop in hops:
                new_hops.append(ip2host.get(hop, hop))
            new_ddict[dest] = new_hops
        new_sdict[source] = new_ddict

    node_set = set()
    traces = []
    for (source, ddict) in new_sdict.items():
        if source != ip:
            continue
        for (dest, hops) in ddict.items():
            hops.insert(0, source)
            traces.append(hops)
            for hop in hops:
                node_set.add(hop)

    G = Digraph(format='png')
    G.attr('node', shape='circle')
    for node in node_set:
        G.node(node, node)

    node_pair_set = set()
    for traces in traces:
        for index, node in enumerate(traces):
            if index+1 == len(traces):
                # last
                pass
            else:
                next_node = traces[index+1]
                if node == next_node:
                    continue
                node_pair = (node, next_node)
                if node_pair in node_pair_set:
                    continue
                node_pair_set.add(node_pair)
                G.edge(node, next_node)

    G.render(ip)


    '''
    node_set = set()
    new_traces = []
    for (source, ddict) in sdict.items():
        for (dest, hops) in ddict.items():
            hops.insert(0, source)
            new_traces.append(hops)
            for hop in hops:
                node_set.add(hop)

    #print(len(node_set))
    #print(new_traces)

    G = Digraph(format='png')
    G.attr('node', shape='circle')
    N = 15
    for node in node_set:
        G.node(node, node)

    for traces in new_traces:
        for index, node in enumerate(traces):
            if index+1 == len(traces):
                pass
            else:
                next_node = traces[index+1]
                G.edge(node, next_node)

    G.render('traceroute_graph')
    '''




'''
analyze('45.0.0.2')
analyze('45.0.0.3')
analyze('45.0.0.4')
analyze('45.0.0.5')
analyze('45.0.0.7')
analyze('45.0.0.8')
analyze('45.0.0.9')
analyze('45.0.0.10')
analyze('45.0.0.11')
analyze('45.0.0.13')
analyze('45.0.0.14')
analyze('45.0.0.15')
analyze('45.0.0.16')
'''

imagelist = [
'45.0.0.2.png',
'45.0.0.3.png',
'45.0.0.4.png',
'45.0.0.5.png',
'45.0.0.7.png',
'45.0.0.8.png',
'45.0.0.9.png',
'45.0.0.10.png',
'45.0.0.11.png',
'45.0.0.13.png',
'45.0.0.14.png',
'45.0.0.15.png',
'45.0.0.16.png',
]
pdf = FPDF()
# imagelist is the list with all image filenames
for image in imagelist:
    pdf.add_page()
    pdf.image(image, w=180)
pdf.output("dtraceroute.pdf", "F")
